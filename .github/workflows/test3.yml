name: Bot_____-bot Runner

on:
  push:
    branches: [ main ]
    paths-ignore: 'README.md'
  workflow_dispatch:

env:
  GitHubMail: "Raj90398525372@gmail.com"
  GitHubName: "Raj90398"

jobs:
  ubuntu:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Set Git Configs & Secrets
        run: |
          git config --global user.email ${GitHubMail}
          git config --global user.name ${GitHubName}
          git config --global color.ui true
          git config --global credential.helper store
          echo "https://${GitHubName}:${{ secrets.GH_TOKEN }}@github.com" > ~/.git-credentials
      - name: Clone -bot repo and Generate config
        run: |
          git clone https://github.com/Raj90398/TorToolkit-Telegram --depth 1 TorToolkit 
          cd TorToolkit/tortoolkit/consts/
          cat << EOF > ExecVarsSample.py
          try:
           from .ExecVars import ExecVars
          except:
            class ExecVars:
            # Set true if its VPS
            IS_VPS = True
            API_HASH = ${{ secrets.API_HASH }}
            API_ID = ${{ secrets.API_ID }}
            BOT_TOKEN = ${{ secrets.TG_TOKEN }}
            BASE_URL_OF_BOT = 127.0.0.1:80
            # Edit the server port if you want to keep it default though.
            SERVPORT = 80
            # ALLOWED USERS [ids of user or supergroup] seperate by commas
            ALD_USR = ${{ secrets.CHAT_ID }}
            OWNER_ID = ${{ secrets.OWN_ID }}
            # Google Drive Index Link should include the base dir also See readme for more info
            GD_INDEX_URL = False
            # Time to wait before edit message
            EDIT_SLEEP_SECS = 40
            # Telegram Upload Limit (in bytes)
            TG_UP_LIMIT = 2000 *1024 * 1024
            # Should force evething uploaded into Document
            FORCE_DOCUMENTS = False
            # Chracter to use as a completed progress 
            COMPLETED_STR = "▰"
            # Chracter to use as a incomplete progress
            REMAINING_STR = "▱"
            # DB URI for access
            DB_URI = "dbname=tortk user=postgres password=your-pass host=127.0.0.1 port=5432"
            # UNCOMMENT THE BELOW LINE WHEN USING CONTAINER AND COMMENT THE UPPER LINE
            #DB_URI = "dbname=tortk user=postgres password=your-pass host=db port=5432"
            # The base direcory to which the files will be upload if using RCLONE
            RCLONE_BASE_DIR = "/"
            # This value will be considered only if Rclone is True - this may be defied now ;)
            # Cuz at least one needs to be Ture at a time either RCLONE or Leech.
            LEECH_ENABLED = True
            # Will be enabled once its set
            # For vps change it to True if config loaded
            RCLONE_ENABLED = False
            # If the user fails to select whether to use rclone or telegram to upload this will be the deafult.
            DEFAULT_TIMEOUT = "leech"
            # For vps set path here or you can use runtime too
            RCLONE_CONFIG = False
            # Name of the RCLONE drive from the config
            DEF_RCLONE_DRIVE = ""
            # Max size of a playlist that is allowed (Number of videos)
            MAX_YTPLAYLIST_SIZE = 20
            # Max size of the torrent allowed
            MAX_TORRENT_SIZE = 10
            # Set this to your bot username if you want to add the username of your bot at the end of the commands like
            # /leech@TorToolkitBot so the value will be @TorToolkitBot
            BOT_CMD_POSTFIX = "" 
            # Time out for the status Delete.
            STATUS_DEL_TOUT = 20
            # Allow the user settings to be accessed in private
            USETTINGS_IN_PRIVATE = False
            # Torrent max time to collect metadata in seconds
            TOR_MAX_TOUT = 180
            # This is to stop someone from abusing the system by imposing the limit
            # [<GBs of total torrent sapce>, <Number of youtube videos allowed to download>, <Number of youtube playlists allowed to download>]
            USER_CAP_ENABLE = False
            USER_CAP_LIMIT = [50,10,2]
            # No need to worry about these
            # CHANGE THESE AT YOUR RISK
            LOCKED_USERS = False
            RSTUFF = False
            FORCE_DOCS_USER = False
            FAST_UPLOAD = True
            METAINFO_BOT = False
            EXPRESS_UPLOAD = True
            EOF
  #    - name: Clone The Secret Mirror Repository
   #     run: |
    #      git clone https://${GitHubName}:${{ secrets.GH_TOKEN }}@github.com/${{ secrets.SOURCE }} source
              # docker build . --rm --force-rm --compress --no-cache=true --pull --file Dockerfile -t botkaca
      - name: Compile The Mirroring Docker Container
        run: |
          cd TorToolkit || exit 1
          echo "${{ secrets.GH_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
          docker-compose build
       #   docker-compose up
       #   docker container prune --force || true
       #   docker build . -t public-leech
       #   docker image ls
      - name: running Docker
        timeout-minutes: 330
        continue-on-error: true
        run: |
          cd TorToolkit || exit 1
          docker-compose up & python3 -m tortoolkit
     #     docker run --privileged --rm -i public-leech
      - name: Workflow Looping
        run: |
          git clone https://github.com/${GITHUB_REPOSITORY} loop
          cd loop || exit 1
          echo $(( RANDOM - ( RANDOM % RANDOM ) )) > looper.txt
          git add looper.txt
          git commit -m "Looping at $(date -u +%D-%T%P)"
          git push -q https://github.com/${GITHUB_REPOSITORY} HEAD:main
